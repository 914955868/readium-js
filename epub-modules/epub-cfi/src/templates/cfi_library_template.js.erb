var EpubCFIModule = function () {

    var EPUBcfi = {};

    <%= cfi_parser %>
    <%= cfi_interpreter %>
    <%= cfi_instructions %>
    <%= runtime_errors %>
    <%= cfi_generator %>

    var interpreter = EPUBcfi.Interpreter;
    var generator = EPUBcfi.Generator;
    var instructions = EPUBcfi.CFIInstructions;

    // The public interface
    return {

        getContentDocHref : function (CFI, packageDocument) {
            return interpreter.getContentDocHref(CFI, packageDocument);
        },
        injectElement : function (CFI, contentDocument, elementToInject, classBlacklist, elementBlacklist, idBlacklist) {
            return interpreter.injectElement(CFI, contentDocument, elementToInject, classBlacklist, elementBlacklist, idBlacklist);
        },
        getTargetElement : function (CFI, contentDocument) {
            return interpreter.getTargetElement(CFI, contentDocument);
        },
        getTargetElementWithPartialCFI : function (contentDocumentCFI, contentDocument) {
            return interpreter.getTargetElementWithPartialCFI(contentDocumentCFI, contentDocument);
        },
        getTextTerminusInfoWithPartialCFI : function (contentDocumentCFI, contentDocument) {
            return interpreter.getTextTerminusInfoWithPartialCFI(contentDocumentCFI, contentDocument);
        },

        generateCharacterOffsetCFIComponent : function (startTextNode, characterOffset) {
            return generator.generateCharacterOffsetCFIComponent(startTextNode, characterOffset);
        },
        generateElementCFIComponent : function (startElement) {
            return generator.generateElementCFIComponent(startElement);
        },
        generatePackageDocumentCFIComponent : function (contentDocumentName, packageDocument) {
            return generator.generatePackageDocumentCFIComponent(contentDocumentName, packageDocument);
        },
        generatePackageDocumentCFIComponentWithSpineIndex : function (spineIndex, packageDocument) {
            return generator.generatePackageDocumentCFIComponentWithSpineIndex(spineIndex, packageDocument);
        },
        generateCompleteCFI : function (packageDocumentCFIComponent, contentDocumentCFIComponent) {
            return generator.generateCompleteCFI(packageDocumentCFIComponent, contentDocumentCFIComponent);
        },
        injectElementAtOffset : function ($textNodeList, textOffset, elementToInject) {
            return instructions.injectCFIMarkerIntoText($textNodeList, textOffset, elementToInject);
        },
        injectRangeElements : function (rangeCFI, contentDocument, startElementToInject, endElementToInject, classBlacklist, elementBlacklist, idBlacklist) {
            return interpreter.injectRangeElements(rangeCFI, contentDocument, startElementToInject, endElementToInject, classBlacklist, elementBlacklist, idBlacklist);
        },
        getRangeTargetElements : function (rangeCFI, contentDocument, classBlacklist, elementBlacklist, idBlacklist) {
            return interpreter.getRangeTargetElements(rangeCFI, contentDocument, classBlacklist, elementBlacklist, idBlacklist);
        },
        generateCharOffsetRangeComponent : function (rangeStartElement, startOffset, rangeEndElement, endOffset, classBlacklist, elementBlacklist, idBlacklist) {
            return generator.generateCharOffsetRangeComponent(rangeStartElement, startOffset, rangeEndElement, endOffset, classBlacklist, elementBlacklist, idBlacklist);
        },
        generateElementRangeComponent : function (rangeStartElement, rangeEndElement, classBlacklist, elementBlacklist, idBlacklist) {
            return generator.generateElementRangeComponent(rangeStartElement, rangeEndElement, classBlacklist, elementBlacklist, idBlacklist);
        }
    };
};
