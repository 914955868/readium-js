var EpubReflowableModule = function(spineObject, viewerSettingsObject, CFIAnnotations, bindings) {

    var EpubReflowable = {};

    // Rationale: The order of these matters
    <%= alternate_style_tag_selector %>
    <%= reflowable_annotations %>
    <%= reflowable_element_info %>
    <%= reflowable_layout %>
    <%= reflowable_page_number_logic %>
    <%= reflowable_pagination %>
    <%= reflowable_paginator %>
    <%= trigger %>
    <%= reflowable_pagination_view %>

    var reflowableView = new EpubReflowable.ReflowablePaginationView({
        spineItem : spineObject,
        viewerSettings : viewerSettingsObject,
        contentDocumentCFIs : CFIAnnotations,
        bindings : bindings
    });

    // Description: The public interface
    return {

        render : function (goToLastPage, hashFragmentId) {
            return reflowableView.render(goToLastPage, hashFragmentId);
        },
        nextPage : function () {
            return reflowableView.nextPage();
        },
        previousPage : function () {
            return reflowableView.previousPage();
        },
        showPageByHashFragment : function (hashFragmentId) {
            return reflowableView.showPageByElementId(hashFragmentId);
        },
        showPageByNumber : function (pageNumber) {
            return reflowableView.showPageByNumber(pageNumber);
        },
        showPageByCFI : function (CFI) {
            return reflowableView.showPageByCFI(CFI);
        },
        onFirstPage : function () {
            return reflowableView.pages.onFirstPage();
        },
        onLastPage : function () {
            return reflowableView.pages.onLastPage();
        },
        showPagesView : function () {
            return reflowableView.showView();
        },
        hidePagesView : function () {
            return reflowableView.hideView();
        },
        numberOfPages : function () {
            return reflowableView.pages.get("numberOfPages");
        },
        currentPage : function () {
            return reflowableView.pages.get("currentPages");
        },
        setFontSize : function (fontSize) {
            return reflowableView.setFontSize(fontSize);
        },
        setMargin : function (margin) {
            return reflowableView.setMargin(margin);
        },
        setTheme : function (theme) {
            return reflowableView.setTheme(theme);
        },
        setSyntheticLayout : function (isSynthetic) {
            return reflowableView.setSyntheticLayout(isSynthetic);
        },
        on : function (eventName, callback, callbackContext) {
            return reflowableView.on(eventName, callback, callbackContext);
        },
        off : function (eventName, callback) {
            return reflowableView.off(eventName, callback);
        },
        resizeContent : function () {
            return reflowableView.paginateContentDocument();
        }
    };
};
