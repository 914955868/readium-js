var EpubReaderModule = function(readerBoundElement, epubSpineInfo, viewerSettings, packageDocumentDOM, renderStrategy) {
    
    var EpubReader = {};

    // Rationale: The order of these matters
    <%= load_strategy %>
    <%= epub_reader %>
    <%= epub_reader_view %>

    var epubReaderView = new EpubReader.EpubReaderView({
        readerElement : readerBoundElement,
        spineInfo : epubSpineInfo,
        viewerSettings : viewerSettings,
        packageDocumentDOM : packageDocumentDOM,
        renderStrategy : renderStrategy
    });

    // Description: The public interface
    return {

        render : function () { return epubReaderView.render.call(epubReaderView); },
        showSpineItem : function (spineIndex, callback, callbackContext) { return epubReaderView.showSpineItem.call(epubReaderView, spineIndex, callback, callbackContext); },
        showPageByCFI : function (CFI, callback, callbackContext) { return epubReaderView.showPageByCFI.call(epubReaderView, CFI, callback, callbackContext); },
        showPageByElementId : function (spineIndex, hashFragmentId, callback, callbackContext) { return epubReaderView.showPageByElementId.call(epubReaderView, spineIndex, hashFragmentId, callback, callbackContext); },
        nextPage : function (callback, callbackContext) { return epubReaderView.nextPage.call(epubReaderView, callback, callbackContext); },
        previousPage : function (callback, callbackContext) { return epubReaderView.previousPage.call(epubReaderView, callback, callbackContext); },
        setFontSize : function (fontSize) { return epubReaderView.setFontSize.call(epubReaderView, fontSize); },
        setMargin : function (margin) { return epubReaderView.setMargin.call(epubReaderView, margin); },
        setTheme : function (theme) { return epubReaderView.setTheme.call(epubReaderView, theme); },
        setSyntheticLayout : function (isSynthetic) { return epubReaderView.setSyntheticLayout.call(epubReaderView, isSynthetic); },
        getNumberOfPages : function () { return epubReaderView.getNumberOfPages.call(epubReaderView); },
        getCurrentPage : function () { return epubReaderView.getCurrentPage.call(epubReaderView); },
        on : function (eventName, callback, callbackContext) { return epubReaderView.assignEventHandler.call(epubReaderView, eventName, callback, callbackContext); },
        off : function (eventName) { return epubReaderView.removeEventHandler.call(epubReaderView, eventName); }, 
        getViewerSettings : function () { return epubReaderView.getViewerSettings.call(epubReaderView); }
    };
};