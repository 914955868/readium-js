var EpubFixedModule = function (spineObjects, viewerSettingsObject) {
    
    var EpubFixed = {};

    // Rationale: The order of these matters
    <%= fixed_page_number_logic %>
    <%= fixed_page_views %>
    <%= fixed_sizing %>
    <%= fixed_layout_style %>
    <%= fixed_page_view %>
    <%= image_page_view %>
    <%= fixed_pagination_view %> 

    var fixedView = new EpubFixed.FixedPaginationView({  
        spineObjects : spineObjects, 
        viewerSettings : viewerSettingsObject
    });

    // Description: The public interface
    return {

        render : function (goToLastPage, hashFragmentId) { return fixedView.render.call(fixedView, goToLastPage, hashFragmentId); },
        nextPage : function () { return fixedView.nextPage.call(fixedView); },
        previousPage : function () { return fixedView.previousPage.call(fixedView); },
        showPageByHashFragment : function (hashFragmentId) { return; },
        showPageByNumber : function (pageNumber) { return fixedView.showPageNumber.call(fixedView, pageNumber); },
        showPageByCFI : function (CFI) { return; }, 
        onFirstPage : function () { return fixedView.fixedPageViews.onFirstPage.call(fixedView.fixedPageViews); },
        onLastPage : function () { return fixedView.fixedPageViews.onLastPage.call(fixedView.fixedPageViews); },
        showPagesView : function () { return fixedView.showPagesView.call(fixedView); },
        hidePagesView : function () { return fixedView.hidePagesView.call(fixedView); },
        numberOfPages : function () { return fixedView.fixedPageViews.get("fixedPages").length; },
        currentPage : function () { return fixedView.fixedPageViews.get("currentPages"); },
        setFontSize : function (fontSize) { return; },
        setMargin : function (margin) { return; },
        setTheme : function (theme) { return; },
        setSyntheticLayout : function (isSynthetic) { return fixedView.setSyntheticLayout.call(fixedView, isSynthetic); },
        on : function (eventName, callback, callbackContext) { return fixedView.on.call(fixedView, eventName, callback, callbackContext); },
        off : function (eventName, callback) { return fixedView.off.call(fixedView, eventName, callback); }//,
        // addSelectionHighlight : function (id) { return reflowableView.annotations.addSelectionHighlight.call(reflowableView.annotations, id); },
        // addSelectionBookmark : function (id) { return reflowableView.annotations.addSelectionBookmark.call(reflowableView.annotations, id); },
        // addHighlight : function (CFI, id) { return reflowableView.annotations.addHighlight.call(reflowableView.annotations, CFI, id); },
        // addBookmark : function (CFI, id) { return reflowableView.annotations.addBookmark.call(reflowableView.annotations, CFI, id); }
    };
};